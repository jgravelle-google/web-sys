#pragma once

#include "em_import.h"

EM_IMPORT_STRUCT("CanvasRenderingContext2D", CanvasRenderingContext2D, {
  EM_IMPORT_FIELD("shadowBlur", double, shadowBlur);
  EM_IMPORT_FIELD("lineCap", const char*, lineCap);
  EM_IMPORT_FIELD("fillStyle", JSObject, fillStyle);
  EM_IMPORT_FIELD("font", const char*, font);
  EM_IMPORT_FIELD("strokeStyle", JSObject, strokeStyle);
  EM_IMPORT_FIELD_GETTER("canvas", JSObject, canvas);
  EM_IMPORT_FIELD("imageSmoothingEnabled", bool, imageSmoothingEnabled);
  EM_IMPORT_FIELD("globalAlpha", double, globalAlpha);
  EM_IMPORT_FIELD("shadowColor", const char*, shadowColor);
  EM_IMPORT_FIELD("lineJoin", const char*, lineJoin);
  EM_IMPORT_FIELD("globalCompositeOperation", const char*, globalCompositeOperation);
  EM_IMPORT_FIELD("miterLimit", double, miterLimit);
  EM_IMPORT_FIELD("textBaseline", const char*, textBaseline);
  EM_IMPORT_FIELD("textAlign", const char*, textAlign);
  EM_IMPORT_FIELD("lineDashOffset", double, lineDashOffset);
  EM_IMPORT_FIELD("mozCurrentTransformInverse", JSObject, mozCurrentTransformInverse);
  EM_IMPORT_FIELD("mozCurrentTransform", JSObject, mozCurrentTransform);
  EM_IMPORT_FIELD("shadowOffsetX", double, shadowOffsetX);
  EM_IMPORT_FIELD("shadowOffsetY", double, shadowOffsetY);
  EM_IMPORT_FIELD("mozImageSmoothingEnabled", bool, mozImageSmoothingEnabled);
  EM_IMPORT_FIELD("filter", const char*, filter);
  EM_IMPORT_FIELD("lineWidth", double, lineWidth);
  EM_IMPORT_FIELD("mozTextStyle", const char*, mozTextStyle);
  EM_IMPORT_METHOD("quadraticCurveTo") void quadraticCurveTo(double cpx, double cpy, double x, double y);
  EM_IMPORT_METHOD("restore") void restore();
  EM_IMPORT_METHOD("moveTo") void moveTo(double x, double y);
  EM_IMPORT_METHOD("lineTo") void lineTo(double x, double y);
  EM_IMPORT_METHOD("addHitRegion") void addHitRegion(JSObject options);
  EM_IMPORT_METHOD("clip") void clip(JSObject winding);
  EM_IMPORT_METHOD("clip") void clip(JSObject path, JSObject winding);
  EM_IMPORT_METHOD("drawFocusIfNeeded") void drawFocusIfNeeded(JSObject element);
  EM_IMPORT_METHOD("setTransform") void setTransform(double a, double b, double c, double d, double e, double f);
  EM_IMPORT_METHOD("setTransform") void setTransform(JSObject transform);
  EM_IMPORT_METHOD("getLineDash") JSObject getLineDash();
  EM_IMPORT_METHOD("createPattern") JSObject createPattern(JSObject image, JSObject repetition);
  EM_IMPORT_METHOD("stroke") void stroke();
  EM_IMPORT_METHOD("stroke") void stroke(JSObject path);
  EM_IMPORT_METHOD("arc") void arc(double x, double y, double radius, double startAngle, double endAngle, bool anticlockwise);
  EM_IMPORT_METHOD("createImageData") ImageData createImageData(double sw, double sh);
  EM_IMPORT_METHOD("createImageData") ImageData createImageData(ImageData imagedata);
  EM_IMPORT_METHOD("measureText") JSObject measureText(const char* text);
  EM_IMPORT_METHOD("demote") void demote();
  EM_IMPORT_METHOD("ellipse") void ellipse(double x, double y, double radiusX, double radiusY, double rotation, double startAngle, double endAngle, bool anticlockwise);
  EM_IMPORT_METHOD("fill") void fill(JSObject winding);
  EM_IMPORT_METHOD("fill") void fill(JSObject path, JSObject winding);
  EM_IMPORT_METHOD("scale") void scale(double x, double y);
  EM_IMPORT_METHOD("drawImage") void drawImage(JSObject image, double dx, double dy);
  EM_IMPORT_METHOD("drawImage") void drawImage(JSObject image, double dx, double dy, double dw, double dh);
  EM_IMPORT_METHOD("drawImage") void drawImage(JSObject image, double sx, double sy, double sw, double sh, double dx, double dy, double dw, double dh);
  EM_IMPORT_METHOD("clearRect") void clearRect(double x, double y, double w, double h);
  EM_IMPORT_METHOD("transform") void transform(double a, double b, double c, double d, double e, double f);
  EM_IMPORT_METHOD("fillText") void fillText(const char* text, double x, double y);
  EM_IMPORT_METHOD("fillText") void fillText(const char* text, double x, double y, double maxWidth);
  EM_IMPORT_METHOD("clearHitRegions") void clearHitRegions();
  EM_IMPORT_METHOD("strokeText") void strokeText(const char* text, double x, double y, double maxWidth);
  EM_IMPORT_METHOD("resetTransform") void resetTransform();
  EM_IMPORT_METHOD("save") void save();
  EM_IMPORT_METHOD("createRadialGradient") JSObject createRadialGradient(double x0, double y0, double r0, double x1, double y1, double r1);
  EM_IMPORT_METHOD("drawWindow") void drawWindow(JSObject window, double x, double y, double w, double h, JSObject bgColor, unsigned long flags);
  EM_IMPORT_METHOD("isPointInPath") bool isPointInPath(double x, double y, JSObject winding);
  EM_IMPORT_METHOD("isPointInPath") bool isPointInPath(JSObject path, double x, double y, JSObject winding);
  EM_IMPORT_METHOD("bezierCurveTo") void bezierCurveTo(double cp1x, double cp1y, double cp2x, double cp2y, double x, double y);
  EM_IMPORT_METHOD("setLineDash") void setLineDash(JSObject segments);
  EM_IMPORT_METHOD("arcTo") void arcTo(double x1, double y1, double x2, double y2, double radius);
  EM_IMPORT_METHOD("fillRect") void fillRect(double x, double y, double w, double h);
  EM_IMPORT_METHOD("removeHitRegion") void removeHitRegion(const char* id);
  EM_IMPORT_METHOD("getTransform") JSObject getTransform();
  EM_IMPORT_METHOD("beginPath") void beginPath();
  EM_IMPORT_METHOD("isPointInStroke") bool isPointInStroke(double x, double y);
  EM_IMPORT_METHOD("isPointInStroke") bool isPointInStroke(JSObject path, double x, double y);
  EM_IMPORT_METHOD("rect") void rect(double x, double y, double w, double h);
  EM_IMPORT_METHOD("rotate") void rotate(double angle);
  EM_IMPORT_METHOD("translate") void translate(double x, double y);
  EM_IMPORT_METHOD("putImageData") void putImageData(ImageData imagedata, double dx, double dy);
  EM_IMPORT_METHOD("putImageData") void putImageData(ImageData imagedata, double dx, double dy, double dirtyX, double dirtyY, double dirtyWidth, double dirtyHeight);
  EM_IMPORT_METHOD("getImageData") ImageData getImageData(double sx, double sy, double sw, double sh);
  EM_IMPORT_METHOD("createLinearGradient") JSObject createLinearGradient(double x0, double y0, double x1, double y1);
  EM_IMPORT_METHOD("strokeRect") void strokeRect(double x, double y, double w, double h);
  EM_IMPORT_METHOD("closePath") void closePath();
});
